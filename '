# Web Server 

import web 
from web import form
import scpsniffer
from scapy.all import *
from threading import Thread
from Queue import Queue, Empty
import json 
from multiprocessing import Process
import signal 
from time import sleep 
from os import system 
import hopper 

urls = ( '/', 'index',
        '/stats','return_stats',
        '/wifi','wifi',
        '/capture','capture',
        '/singlemonitor','singlemonitor'
    )

globalStatus = {'status': scpsniffer.stop_capture,'title':'piToolBox'}

render = web.template.render('templates',base='base',globals=globalStatus)


class index:
    def GET(self):
        return render.index()
    def POST(self):
        return json.dumps(scpsniffer.show())
class wifi:
    def GET(self):
        return render.wifi()
    def POST(self):
        return json.dumps(scpsniffer.show())

class capture:
    def GET(self):
        wifi_info = web.input(name=None,channel=None,essid=None)
        return render.capture(wifi_info)
    def POST(self):
        return json.dumps(scpsniffer.show())

class singlemonitor:
    def POST(self):
        interface ='wlan0'
        values = web.input(essid=None,channel=None)
        essid = values['essid']
        channel = values['channel']
        print "Before join", hop.is_alive()
        hop.join()
        #hop.hopperSetChannel(channel)
        print "is alive: ", hop.is_alive()

class return_stats:
    def GET(self):
        print userData
        return render.index(scpsniffer.stop_capture,scpsniffer.show())


class Scanner(Thread):
    def __init__(self,interface):
        Thread.__init__(self)
        self.interface = interface 
        self.running = True 

    def run(self):
        print "Scanner Started.."
        scpsniffer.capture(self.interface)

    def scannerStop(self):
        scpsniffer.action_StopSniff();

    def scannerStart(self):
        scpsniffer.capture()

os.system("clear")
interface = "wlan0"
qhop = Queue()
hop = hopper.Channel_hopper(interface,qhop)
hop.start()
scanner = Scanner(interface)
scanner.start()



if __name__=="__main__":

    scpsniffer.cli_mode = False
    app = web.application(urls, globals())
    app.internalerror = web.debugerror
    print "Starting WebApplication...."
    app.run() 


